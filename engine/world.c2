/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

module world;

import sdl;
import stdio;
import stdlib;

import entity local;
import sstring;

type World struct {
	bool               invalid;

	u32                block_size;
	u32                width;
	u32                height;
	u32                depth;
	u32[][][]          blocks;
	SDL_Texture*[][][] block_textures;

	u32                ent_count;
	Entity[]           entities;
}

func void World.allocate(World* world)
{
	world.blocks = malloc(world.width *sizeof(u32**));
	world.block_textures = malloc(world.width *sizeof(SDL_Texture***));

	for (size x = 0; x < world.width; x++) {
		world.blocks[x] = malloc(world.height *sizeof(u32*));
		world.block_textures[x] =
		    malloc(world.height *sizeof(SDL_Texture**));

		for (size y = 0; y < world.height; y++) {
			world.blocks[x][y] =
			    malloc(world.depth *sizeof(u32));
			world.block_textures[x][y] =
			    malloc(world.depth *sizeof(SDL_Texture*));
		}
	}

	world.entities = malloc(world.ent_count *sizeof(Entity));
}

func World newWorld(const u32 block_size,
	            const u32 width,
		    const u32 height,
		    const u32 depth)
{
	World world = {
		.invalid = false,
		.block_size = block_size,
		.width = width,
		.height = height,
		.depth = depth,
		.ent_count = 1,
	}

	world.allocate();

	return world;
}

func World newWorldFromFile(const char* filepath)
{
	World world = {
		.invalid = false,
	}
	FILE* f;

	f = fopen(filepath, "r");

	if (f == NULL) {
		world.invalid = true;
		return world;
	}
	
	// read header
	fread(&world.block_size, sizeof(world.block_size), 1, f);
	fread(&world.width, sizeof(world.width), 1, f);
	fread(&world.height, sizeof(world.height), 1, f);
	fread(&world.depth, sizeof(world.depth), 1, f);
	fread(&world.ent_count, sizeof(world.ent_count), 1, f);

	world.allocate();

	// read blocks
	for (u32 x = 0; x < world.width; x++)
		for (u32 y = 0; y < world.height; y++)
			for (u32 z = 0; z < world.depth; z++)
				fread(&world.blocks[x][y][z],
				      sizeof(world.blocks[x][y][z]), 1, f);

	// read entitites
	for (usize i = 0; i < world.ent_count; i++) {
		fread(&world.entities[i].id, sizeof(world.entities[i]/*.id*/), 1, f);
/* TODO c2c bug? (see above statement as well)
		fread(&world.entities[i].rect.x,
		      sizeof(world.entities[i].rect.x), 1, f);
		fread(&world.entities[i].rect.y,
		      sizeof(world.entities[i].rect.y), 1, f);
		fread(&world.entities[i].rect.w,
		      sizeof(world.entities[i].rect.w), 1, f);
		fread(&world.entities[i].rect.h,
		      sizeof(world.entities[i].rect.h), 1, f);
		fread(&world.entities[i].grounded,
		      sizeof(world.entities[i].grounded), 1, f);
		fread(&world.entities[i].velocity_x,
		      sizeof(world.entities[i].velocity_x), 1, f);
		fread(&world.entities[i].velocity_y,
		      sizeof(world.entities[i].velocity_y), 1, f);
*/
	}

	fclose(f);

	return world;
}

func void World.toFile(World* world, const char* filepath)
{
	FILE* f;

	f = fopen(filepath, "w");

	// if file did not open, set flag and stop
	if (f == NULL) {
		world.invalid = true;
		return;
	}
	
	// write header
	fwrite(&world.block_size, sizeof(world.block_size), 1, f);
	fwrite(&world.width, sizeof(world.width), 1, f);
	fwrite(&world.height, sizeof(world.height), 1, f);
	fwrite(&world.depth, sizeof(world.depth), 1, f);
	fwrite(&world.ent_count, sizeof(world.ent_count), 1, f);

	// write blocks
	for (u32 x = 0; x < world.width; x++)
		for (u32 y = 0; y < world.height; y++)
			for (u32 z = 0; z < world.depth; z++)
				fwrite(&world.blocks[x][y][z],
				       sizeof(world.blocks[x][y][z]), 1, f);

	// write entities
	for (size_t i = 0; i < world.ent_count; i++) {
		fwrite(&world.entities[i].id, sizeof(world.entities[i]/*.id*/), 1,
		       f);
/* TODO c2c bug? (see above statement as well)
		fwrite(&world.entities[i].rect.x,
		       sizeof(world.entities[i].rect.x), 1, f);
		fwrite(&world.entities[i].rect.y,
		       sizeof(world.entities[i].rect.y), 1, f);
		fwrite(&world.entities[i].rect.w,
		       sizeof(world.entities[i].rect.w), 1, f);
		fwrite(&world.entities[i].rect.h,
		       sizeof(world.entities[i].rect.h), 1, f);
		fwrite(&world.entities[i].grounded,
		       sizeof(world.entities[i].grounded), 1, f);
		fwrite(&world.entities[i].velocity_x,
		       sizeof(world.entities[i].velocity_x), 1, f);
		fwrite(&world.entities[i].velocity_y,
		       sizeof(world.entities[i].velocity_y), 1, f);
*/
	}

	fclose(f);
}

func void World.free(World* world)
{
	for (u32 i = 0; i < world.width; i++) {
		free(world.blocks[i]);
		free(world.block_textures[i]);
	}

	free(world.blocks);
	free(world.block_textures);

	free(world.entities);
}
