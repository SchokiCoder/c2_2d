/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

module sstring;

import stdlib;
import string;

const usize IMPLICIT_INITIAL_SIZE = 8;

type String struct {
	size  len;
	size  size;
	char* str;
}

func bool strequal(const char* a, const char* b)
{
	const usize a_len = strlen(a);
	const usize b_len = strlen(b);

	if (a_len != b_len)
		return 0;

	for (usize i = 0; i < a_len; i++) {
		if (a[i] != b[i]) {
			return 0;
		}
	}

	return 1;
}

func void String.grow(String* str)
{
	str.size *= 2;
	str.str = realloc(str.str, str.size);
}

func void String.ensure_size(String* str, usize size)
{
	while (str.size < size)
		str.grow();
}

func String newString(const usize inital_size)
{
	String ret = {
		.len = 0,
		.str = malloc(inital_size),
		.size = inital_size
	}

	return ret;
}

func String newStringFrom(const char* cstr)
{
	String ret = newString(IMPLICIT_INITIAL_SIZE);
	const size_t cstrlen = strlen(cstr);

	String temp = containString(cstr);
	ret.copyFrom(&temp);

	return ret;
}

func String containString(char* cstr)
{
	const size_t cstrlen = strlen(cstr);
	const String ret = {
		.len = cstrlen - 1,
		.size = 0,
		.str = cstr
	}

	return ret;
}

func void String.copyFrom(String* dest, String* src)
{
	dest.ensureSize(src.len + 1);

	strncpy(dest.str, src.str, src.len + 1);

	dest.len = src.len;
}

func void String.appendFrom(String* dest, String* addendum)
{
	dest.ensureSize(dest.len + addendum.len + 1);

	strncpy(&dest.str[dest.len], addendum.str, addendum.len + 1);

	dest.len += addendum.len;
}

func void String.copyFromCstr(String* dest, const char* src)
{
	const usize src_len = strlen(src);
	dest.ensureSize(src_len);

	strncpy(dest.str, src, src_len);

	dest.len = src_len - 1;
}

func void String.appendFromCstr(String* dest, const char* addendum)
{
	const usize add_len = strlen(addendum);
	dest.ensureSize(dest.len + add_len);

	strncpy(&dest.str[dest.len], addendum, add_len);

	dest.len += add_len - 1;
}

func bool String.equal(const String* a, const String* b)
{
	if (a.len != b.len)
		return false;

	for (usize i = 0; i < a.len; i++)
		if (a.str[i] != b.str[i])
			return false;

	return true;
}

func void String.empty(String* str)
{
	str.str[0] = '\0';
	str.len = 0;
}

func void String.free(String* str)
{
	free(str.str);
	str.len = 0;
	str.size = 0;
}
