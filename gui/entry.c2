/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

module entry;

import menu;
import sdl;
import sprite local;
import sstring local;
import theme;

const u32 TEXT_INIT_SIZE = 32;

type EntryStyle struct {
	sdl.Color font_color;
	sdl.Color bg_color;
	sdl.Color border_color;
	sdl.Color disabled_color;
}

type Entry struct {
	Menu*      menu;
	TTF_Font*  font;
	bool       visible;
	bool       active;
	String     text;
	Sprite*    sprites;
		   
	SDL_Rect   rect;
	EntryStyle style;
}

func void Entry.init(Entry*           entry,
	             Menu*            menu,
                     TTF_Font*        font,
	             const EntryStyle style)
{
	entry.menu = menu;
	entry.font = font;

	entry.sprites = malloc(TEXT_INIT_SIZE * sizeof(Sprite));

	for (size_t i = 0; i < TEXT_INIT_SIZE; i++)
		entry.sprites[i] = newSprite();

	entry.text = newString(TEXT_INIT_SIZE);
	entry.visible = true;
	entry.active = true;
	entry.style = style;

	menu.entries[menu.entry_count] = entry;
	menu.entry_count++;
}

func void Entry.updateSprite(Entry* entry, size pos)
{
	// stop if sprite doesn't exist
	if (pos > (entry.text.len - 1))
		return;

	char[2] letter = {
		[0] = entry.text.str[pos],
		[1] = '\0'
	}

	// clear
	Sprite_clear(&entry.sprites[pos]);

	// generate sprite of that letter
	entry.sprites[pos] = newSpriteFromText(entry.menu.renderer,
			letter,
			entry.font,
			entry.style.font_color);
}

func void Entry.updateSprites(Entry* entry)
{
	size i;
	
	for (i = 0; i < entry.text.len; i++)
		entry.updateSprite(i);
}

func void Entry.append(Entry* entry, String* appendage)
{
	const size old_size = entry.text.size;
	size new_size;
	size i;

	entry.text.append(appendage);

	// increase sprite array size
	if (entry.text.size > old_size) {
		new_size = old_size * 2 * sizeof(Sprite);
		entry.sprites = realloc(entry.sprites, new_size);

		for (size_t i = old_size; i < entry.text.size; i++) {
			entry.sprites[i] = Sprite_new();
		}
	}

	// update new sprites
	for (i = entry.text.len - appendage.len; i < entry.text.len; i++)
		entry.updateSprite(i);
}

func void Entry.draw(Entry* entry)
{
	SDL_Rect draw_target;
	u32 text_width = 0;

	// draw bg
	entry.menu.renderer.setDrawColor(entry.style.bg_color.r,
			entry.style.bg_color.g,
			entry.style.bg_color.b,
			entry.style.bg_color.a);
	entry.menu.renderer.fillRect(&entry.rect);

	// draw border
	entry.menu.renderer.setDrawColor(entry.style.border_color.r,
			entry.style.border_color.g,
			entry.style.border_color.b,
			entry.style.border_color.a);
	entry.menu.renderer.drawRect(&entry.rect);

	// draw text
	for (size_t i = 0; i < entry.text.len; i++) {
		// if text exceeds entry width, stop
		if (text_width > cast<u32>(entry.rect.w))
			break;

		// draw
		draw_target.x = entry.rect.x + text_width;
		draw_target.y = entry.rect.y;
		draw_target.w = entry.sprites[i].surface.w;
		draw_target.h = entry.sprites[i].surface.h;

		entry.menu.renderer.copy(entry.sprites[i].texture,
				NULL,
				&draw_target);

		text_width += draw_target.w;
	}

	// if disabled, draw disabled shade
	if (entry.active == false) {
		entry.menu.renderer.setDrawColor(entry.style.disabled_color.r,
				entry.style.disabled_color.g,
				entry.style.disabled_color.b,
				entry.style.disabled_color.a);
		entry.menu.renderer.fillRect(&entry.rect);
	}
}

func void Entry.freeSprites(Entry* entry)
{
	size i;
	
	for (i = 0; i < entry.text.len; i++)
		entry.sprites[i].free();

	free(entry.sprites);
}

func void Entry.resize(Entry* entry)
{
	size i;
	
	entry.rect.h = entry.sprites[0].surface.h;
	entry.rect.w = 0;

	for (i = 0; i < entry.text.len; i++)
		entry.rect.w += entry.sprites[i].surface.w;
}
