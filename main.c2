/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

module ch_main;

import sdl;
import sdl_ttf;
import libc_time;

import button;
import ch_config;
import ch_entity;
import ch_game;
import ch_motd;
import ch_world;
import label;
import log;
import menu;
import sstring;
import theme local;

const i16 FONT_SIZE = 16;

const f32 MENU_FRAMERATE = 30.0;

const u32 MNU_MAIN_X = 50;
const u32 MNU_MAIN_Y = 200;

const u32 MNU_SUB_X = MNU_MAIN_X + 25;
const u32 MNU_SUB_Y = MNU_MAIN_Y + 0;

const Theme THEME_MASTER = {
	.menu = {
		.bg_color = {.r = 155, .g = 219, .b = 245, .a = 255},
	},

	.label = {
		.font_color = {.r = 50, .g = 50, .b = 200, .a = 255},
		.bg_color = {.r = 255, .g = 255, .b = 255, .a = 255},
		.border_color = {.r = 0, .g = 0, .b = 0, .a = 0},
	},

	.button = {
		.font_color = {.r = 50, .g = 50, .b = 50, .a = 255},
		.bg_color = {.r = 255, .g = 255, .b = 255, .a = 255},
		.border_color = {.r = 0, .g = 0, .b = 0, .a = 0},
		.disabled_color = {.r = 0, .g = 0, .b = 0, .a = 50},
	},

	.entry = {
		.font_color = {.r = 0, .g = 0, .b = 0, .a = 255},
		.bg_color = {.r = 240, .g = 240, .b = 240, .a = 255},
		.border_color = {.r = 0, .g = 0, .b = 0, .a = 255},
		.disabled_color = {.r = 0, .g = 0, .b = 0, .a = 50},
	},
}

const Theme THEME_MAIN = {
	.menu = {
		.bg_color = {.r = 0, .g = 0, .b = 0, .a = 0},
	},

	.label = {
		.font_color = {.r = 50, .g = 50, .b = 200, .a = 255},
		.bg_color = {.r = 255, .g = 255, .b = 255, .a = 255},
		.border_color = {.r = 0, .g = 0, .b = 0, .a = 0},
	},

	.button = {
		.font_color = {.r = 50, .g = 50, .b = 50, .a = 255},
		.bg_color = {.r = 255, .g = 255, .b = 255, .a = 255},
		.border_color = {.r = 0, .g = 0, .b = 0, .a = 0},
		.disabled_color = {.r = 0, .g = 0, .b = 0, .a = 50},
	},

	.entry = {
		.font_color = {.r = 0, .g = 0, .b = 0, .a = 255},
		.bg_color = {.r = 240, .g = 240, .b = 240, .a = 255},
		.border_color = {.r = 0, .g = 0, .b = 0, .a = 255},
		.disabled_color = {.r = 0, .g = 0, .b = 0, .a = 50},
	}
}

const Theme THEME_SUB = {
	.menu = {
		.bg_color = {.r = 0, .g = 0, .b = 0, .a = 0},
	},

	.label = {
		.font_color = {.r = 50, .g = 50, .b = 200, .a = 255},
		.bg_color = {.r = 255, .g = 255, .b = 255, .a = 255},
		.border_color = {.r = 0, .g = 0, .b = 0, .a = 0},
	},

	.button = {
		.font_color = {.r = 20, .g = 255, .b = 20, .a = 255},
		.bg_color = {.r = 255, .g = 255, .b = 255, .a = 255},
		.border_color = {.r = 255, .g = 255, .b = 255, .a = 20},
		.disabled_color = {.r = 0, .g = 0, .b = 0, .a = 50},
	},

	.entry = {
		.font_color = {.r = 0, .g = 0, .b = 0, .a = 255},
		.bg_color = {.r = 240, .g = 240, .b = 240, .a = 255},
		.border_color = {.r = 200, .g = 200, .b = 200, .a = 255},
		.disabled_color = {.r = 0, .g = 0, .b = 0, .a = 50},
	}
}

type MenuData struct {
	SDL_Event* event;
	Menu*      mnu_main;
	Menu*      mnu_start_game;
	Menu*      mnu_editor;
	Menu*      mnu_settings;
	Menu*      mnu_license;
}

type BtnSettingsData struct {
	MenuData* menu_data;
	Config*   cfg;
	Entry*    txt_gfx_window_w;
	Entry*    txt_gfx_window_h;
	Entry*    txt_gfx_window_fullscreen;
}

type BtnStartEditData struct {
	Game   game;
	Entry* txt_edit_name;
	Entry* txt_edit_width;
	Entry* txt_edit_height;
}

func void btn_start_game_click(void* ptr)
{
	MenuData* data = cast<MenuData*>(ptr);

	// toggle menus, clear event
	data.mnu_main.visible = false;
	data.mnu_start_game.visible = true;
	data.event.eventType = SDL_USEREVENT;
}

func void btn_editor_click(void* ptr)
{
	MenuData* data = cast<MenuData*>(ptr);

	// toggle menus, clear event
	data.mnu_main.visible = false;
	data.mnu_editor.visible = true;
	data.event.eventType = SDL_USEREVENT;
}

func void btn_settings_click(void* ptr)
{
	BtnSettingsData* data = cast<BtnSettingsData*>(ptr);

	// toggle menus, clear event
	data.menu_data.mnu_main.visible = false;
	data.menu_data.mnu_settings.visible = true;
	data.menu_data.event.eventType = SDL_USEREVENT;

	// update setting entries
	sprintf(data.txt_gfx_window_w.text.str, "%i",
		data.cfg.gfx_window_w);
	data.txt_gfx_window_w.text.len =
	    strlen(data.txt_gfx_window_w.text.str) - 1;
	Entry_update_sprites(data.txt_gfx_window_w);

	sprintf(data.txt_gfx_window_h.text.str, "%i",
		data.cfg.gfx_window_h);
	data.txt_gfx_window_h.text.len =
	    strlen(data.txt_gfx_window_h.text.str) - 1;
	Entry_update_sprites(data.txt_gfx_window_h);

	sprintf(data.txt_gfx_window_fullscreen.text.str, "%i",
		data.cfg.gfx_window_fullscreen);
	data.txt_gfx_window_fullscreen.text.len =
	    strlen(data.txt_gfx_window_fullscreen.text.str) - 1;
	Entry_update_sprites(data.txt_gfx_window_fullscreen);
}

func void btn_exit_click(void* ptr)
{
	bool* active = cast<bool*>(ptr);

	*active = false;
}

func void btn_version_click(void* ptr)
{
	MenuData* data = cast<MenuData*>(ptr);

	// toggle menus, clear event
	data.mnu_main.visible = false;
	data.mnu_license.visible = true;
	data.event.eventType = SDL_USEREVENT;
}

func void btn_start_game_close_click(void* ptr)
{
	MenuData* data = cast<MenuData*>(ptr);

	// toggle menus, clear event
	data.mnu_main.visible = true;
	data.mnu_start_game.visible = false;
	data.event.eventType = SDL_USEREVENT;
}

func void btn_editor_close_click(void* ptr)
{
	MenuData* data = cast<MenuData*>(ptr);

	// toggle menus, clear event
	data.mnu_main.visible = true;
	data.mnu_editor.visible = false;
	data.event.eventType = SDL_USEREVENT;
}

func void btn_settings_close_click(void* ptr)
{
	BtnSettingsData* data = cast<BtnSettingsData*>(ptr);

	// toggle menus, clear event
	data.menu_data.mnu_main.visible = true;
	data.menu_data.mnu_settings.visible = false;
	data.menu_data.event.eventType = SDL_USEREVENT;

	// save changes to cfg
	data.cfg.gfx_window_w =
		strtol(data.txt_gfx_window_w.text.str, NULL, 10);
	data.cfg.gfx_window_h =
	    strtol(data.txt_gfx_window_h.text.str, NULL, 10);
	data.cfg.gfx_window_fullscreen =
	    strtol(data.txt_gfx_window_fullscreen.text.str, NULL, 10);
}

func void btn_license_close_click(void* ptr)
{
	MenuData* data = cast<MenuData*>(ptr);

	// toggle menus, clear event
	data.mnu_main.visible = true;
	data.mnu_license.visible = false;
	data.event.eventType = SDL_USEREVENT;
}

func void btn_chapter1_click(void* ptr)
{
	Game* data = cast<Game*>(ptr);

	Game_run(data);
}

func void btn_start_edit_click(void *ptr)
{
	BtnStartEditData* data = cast<BtnStartEditData*>(ptr);
	size_t world_width;
	size_t world_height;

	// parse input
	world_width = strtoul(data.txt_edit_width.text.str, NULL, 10);
	world_height = strtoul(data.txt_edit_height.text.str, NULL, 10);
	data.game.world_name = data.txt_edit_name.text.str;

	// start editor
	Game_edit(&data.game, world_width, world_height);
}

func void gen_demo_horizontal(void)
{
	World ret = Ch_World_new(128, 128);

	ret.blocks[0][0][0] = Blocks.Stone;
	ret.blocks[0][1][0] = Blocks.Stone;
	ret.blocks[0][5][0] = Blocks.Dirt;

	ret.blocks[1][5][0] = Blocks.Dirt;
	ret.blocks[1][6][0] = Blocks.Stone;

	ret.blocks[2][5][0] = Blocks.Dirt;
	ret.blocks[2][6][0] = Blocks.Stone;

	ret.blocks[3][5][0] = Blocks.Dirt;
	ret.blocks[3][6][0] = Blocks.Stone;

	ret.blocks[4][5][0] = Blocks.Dirt;
	ret.blocks[4][6][0] = Blocks.Stone;

	ret.blocks[5][5][0] = Blocks.Dirt;
	ret.blocks[5][6][0] = Blocks.Stone;

	ret.blocks[6][6][0] = Blocks.Stone;

	ret.blocks[7][6][0] = Blocks.Stone;

	ret.blocks[10][0][0] = Blocks.Stone;
	ret.blocks[10][1][0] = Blocks.Stone;

	ret.blocks[0][3][1] = Blocks.Dirt;
	ret.blocks[0][4][1] = Blocks.Dirt;

	ret.blocks[1][3][1] = Blocks.Dirt;
	ret.blocks[1][4][1] = Blocks.Dirt;

	ret.blocks[2][3][1] = Blocks.Dirt;
	ret.blocks[2][4][1] = Blocks.Dirt;

	ret.blocks[3][3][1] = Blocks.Dirt;
	ret.blocks[3][4][1] = Blocks.Dirt;

	ret.blocks[4][4][1] = Blocks.Dirt;

	ret.entities[0].rect.x = 2.0 * cast<f32>(ch_block.SIZE);
	ret.entities[0].rect.y = 1.0 * cast<f32>(ch_block.SIZE);

	World_to_file(&ret, "test");
	World_free(&ret);
}

public func i32 main()
{
	sstring.String window_title = sstring.new(64);
	sstring.String msg = sstring.new(16);
	SDL_Window*    window;
	SDL_Renderer*  renderer = NULL;
	TTF_Font*      font;
	bool           main_active = true;
	sdl.Event      event;
	Config         cfg = Config_new();

	Menu mnu_master;
	Label lbl_app_name;
	Button btn_version;

	Menu mnu_main;
	Button btn_start_game;
	Button btn_editor;
	Button btn_settings;
	Button btn_exit;

	Menu mnu_start_game;
	Button btn_start_game_close;
	Button btn_chapter1;

	Menu mnu_editor;
	Button btn_editor_close;
	Label lbl_edit_name;
	Entry txt_edit_name;
	Label lbl_edit_width;
	Entry txt_edit_width;
	Label lbl_edit_height;
	Entry txt_edit_height;
	Button btn_start_edit;

	Menu mnu_settings;
	Button btn_settings_close;
	Label lbl_gfx_window_w;
	Entry txt_gfx_window_w;
	Label lbl_gfx_window_h;
	Entry txt_gfx_window_h;
	Label lbl_gfx_window_fullscreen;
	Entry txt_gfx_window_fullscreen;

	Menu mnu_license;
	Button btn_license_close;
	Label lbl_license;
	Label lbl_notice1;
	Label lbl_notice2;
	Label lbl_source1;
	Label lbl_source2;

	MenuData menu_data = {
		.event = &event,
		.mnu_main = &mnu_main,
		.mnu_start_game = &mnu_start_game,
		.mnu_editor = &mnu_editor,
		.mnu_settings = &mnu_settings,
		.mnu_license = &mnu_license,
	}

	BtnSettingsData btn_settings_data = {
		.cfg = &cfg,
		.menu_data = &menu_data,
		.txt_gfx_window_w = &txt_gfx_window_w,
		.txt_gfx_window_h = &txt_gfx_window_h,
		.txt_gfx_window_fullscreen = &txt_gfx_window_fullscreen,
	}

	// open log file and check
	log.open();

	if (log.file == NULL) {
		printf("Log file \"%s\" could not be opened.\nAbort.\n",
		       PATH_LOG);
		goto main_clear;
	}

	// load config
	cfg.fromFile();

	// parse config values
	int window_mode = SDL_WINDOW_SHOWN;

	if (cfg.gfx_window_fullscreen)
		window_mode = SDL_WINDOW_FULLSCREEN;

	// seed random generator
	srand(time(NULL));

	// init SDL
	if (sdl.init(sdl.INIT_VIDEO) != 0) {
		log.err("SDL could not initialize.");
		goto main_clear;
	}
	
	// init TTF
	if (ttf.init() != 0) {
		log.err("TTF could not initialize.");
		goto main_clear;
	}
	
	// load font
	font = ttf.openFont(
		"/usr/share/fonts/liberation-mono/LiberationMono-Regular.ttf",
		FONT_SIZE);

	// create window title
	window_title.copyFromCstr(APP_NAME);
	window_title.appendFromCstr(": ");
	window_title.appendFromCstr(MOTDS[rand() %
				    (sizeof(MOTDS) / sizeof(MOTDS[0]))]);

	// create window and renderer
	window = sdl.createWindow(window_title.str,
				  cfg.gfx_window_x, cfg.gfx_window_y,
				  cfg.gfx_window_w, cfg.gfx_window_h,
				  window_mode);
	renderer = sdl.createRenderer(window, -1, 0);

	// check window and renderer
	if (window == NULL || renderer == NULL) {
		log.err("SDL could not open a window and renderer.");
		goto main_clear;
	}
	
	// game data
	Game game = {
		.world_name = "test",
		.renderer = renderer,
		.cfg = &cfg,
	}

	BtnStartEditData btn_start_edit_data = {
		.game = {
			.renderer = renderer,
			.cfg = &cfg,
		},
		.txt_edit_name = &txt_edit_name,
		.txt_edit_width = &txt_edit_width,
		.txt_edit_height = &txt_edit_height,
	}

	// enable alpha blending
	renderer.setDrawBlendMode(SDL_BLENDMODE_BLEND);

	// make menus
	mnu_master = menu.new(renderer, THEME_MASTER.menu);
	lbl_app_name.init(&mnu_master, font, THEME_MASTER.label);
	btn_version.init(&mnu_master, font, THEME_MASTER.button);

	mnu_main = menu.new(renderer, THEME_MAIN.menu);
	btn_start_game.init(&mnu_main, font, THEME_MAIN.button);
	btn_editor.init(&mnu_main, font, THEME_MAIN.button);
	btn_settings.init(&mnu_main, font, THEME_MAIN.button);
	btn_exit.init(&mnu_main, font, THEME_MAIN.button);

	mnu_start_game = menu.new(renderer, THEME_SUB.menu);
	btn_start_game_close.init(&mnu_start_game, font, THEME_SUB.button);
	btn_chapter1.init(&mnu_start_game, font, THEME_SUB.button);

	mnu_editor = menu.new(renderer, THEME_SUB.menu);
	btn_editor_close.init(&mnu_editor, font, THEME_SUB.button);
	lbl_edit_name.init(&mnu_editor, font, THEME_SUB.label);
	txt_edit_name.init(&mnu_editor, font, THEME_SUB.entry);
	lbl_edit_width.init(&mnu_editor, font, THEME_SUB.label);
	txt_edit_width.init(&mnu_editor, font, THEME_SUB.entry);
	lbl_edit_height.init(&mnu_editor, font, THEME_SUB.label);
	txt_edit_height.init(&mnu_editor, font, THEME_SUB.entry);
	btn_start_edit.init(&mnu_editor, font, THEME_SUB.button);

	mnu_settings = menu.new(renderer, THEME_SUB.menu);
	btn_settings_close.init(&mnu_settings, font, THEME_SUB.button);
	lbl_gfx_window_w.init(&mnu_settings, font, THEME_SUB.label);
	txt_gfx_window_w.init(&mnu_settings, font, THEME_SUB.entry);
	lbl_gfx_window_h.init(&mnu_settings, font, THEME_SUB.label);
	txt_gfx_window_h.init(&mnu_settings, font, THEME_SUB.entry);
	lbl_gfx_window_fullscreen.init(&mnu_settings, font, THEME_SUB.label);
	txt_gfx_window_fullscreen.init(&mnu_settings, font, THEME_SUB.entry);

	mnu_license = menu.new(renderer, THEME_SUB.menu);
	btn_license_close.init(&mnu_license, font, THEME_SUB.button);
	lbl_license.init(&mnu_license, font, THEME_SUB.label);
	lbl_notice1.init(&mnu_license, font, THEME_SUB.label);
	lbl_notice2.init(&mnu_license, font, THEME_SUB.label);
	lbl_source1.init(&mnu_license, font, THEME_SUB.label);
	lbl_source2.init(&mnu_license, font, THEME_SUB.label);

	// define menu mnu_master
	mnu_master.rect.x = 0;
	mnu_master.rect.y = 0;
	mnu_master.rect.w = cfg.gfx_window_w;
	mnu_master.rect.h = cfg.gfx_window_h;

	lbl_app_name.text.copyFromCstr(APP_NAME);
	lbl_app_name.updateSprite();
	lbl_app_name.rect.w = lbl_app_name.sprite.surface.w;
	lbl_app_name.rect.h = lbl_app_name.sprite.surface.h;
	lbl_app_name.rect.x = 25;
	lbl_app_name.rect.y = 150;

	btn_version.text.appendFromCstr(APP_VERSION);
	btn_version.updateSprite();
	btn_version.rect.w = btn_version.sprite.surface.w;
	btn_version.rect.h = btn_version.sprite.surface.h;
	btn_version.rect.x = cfg.gfx_window_w - btn_version.rect.w - 5;
	btn_version.rect.y = cfg.gfx_window_h - btn_version.rect.h - 5;
	btn_version.func_click = btn_version_click;
	btn_version.data_click = &menu_data;

	// mnu_main
	mnu_main.rect.x = MNU_MAIN_X;
	mnu_main.rect.y = MNU_MAIN_Y;
	mnu_main.rect.w = 0;
	mnu_main.rect.h = 0;

	btn_start_game.text.copyFromCstr("Start game .");
	btn_start_game.updateSprite();
	btn_start_game.rect.w = btn_start_game.sprite.surface.w;
	btn_start_game.rect.h = btn_start_game.sprite.surface.h;
	btn_start_game.rect.x = mnu_main.rect.x;
	btn_start_game.rect.y = mnu_main.rect.y;
	btn_start_game.func_click = btn_start_game_click;
	btn_start_game.data_click = &menu_data;

	btn_editor.text.copyFromCstr("Editor .");
	btn_editor.updateSprite();
	btn_editor.rect.w = btn_editor.sprite.surface.w;
	btn_editor.rect.h = btn_editor.sprite.surface.h;
	btn_editor.rect.x = mnu_main.rect.x;
	btn_editor.rect.y = btn_start_game.rect.y + btn_start_game.rect.h;
	btn_editor.func_click = btn_editor_click;
	btn_editor.data_click = &menu_data;

	btn_settings.text.copyFromCstr("Settings .");
	btn_settings.updateSprite();
	btn_settings.rect.w = btn_settings.sprite.surface.w;
	btn_settings.rect.h = btn_settings.sprite.surface.h;
	btn_settings.rect.x = mnu_main.rect.x;
	btn_settings.rect.y = btn_editor.rect.y + btn_editor.rect.h;
	btn_settings.func_click = btn_settings_click;
	btn_settings.data_click = &btn_settings_data;

	btn_exit.text.copyFromCstr("Exit");
	btn_exit.updateSprite();
	btn_exit.rect.w = btn_exit.sprite.surface.w;
	btn_exit.rect.h = btn_exit.sprite.surface.h;
	btn_exit.rect.x = mnu_main.rect.x;
	btn_exit.rect.y = btn_settings.rect.y + btn_settings.rect.h;
	btn_exit.func_click = btn_exit_click;
	btn_exit.data_click = &main_active;

	// mnu_start_game
	mnu_start_game.rect.x = MNU_SUB_X;
	mnu_start_game.rect.y = MNU_SUB_Y;
	mnu_start_game.rect.w = 0;
	mnu_start_game.rect.h = 0;
	mnu_start_game.visible = 0;

	btn_start_game_close.text.copyFromCstr("<- Main");
	btn_start_game_close.updateSprite();
	btn_start_game_close.rect.w = btn_start_game_close.sprite.surface.w;
	btn_start_game_close.rect.h = btn_start_game_close.sprite.surface.h;
	btn_start_game_close.rect.x = mnu_start_game.rect.x;
	btn_start_game_close.rect.y = mnu_start_game.rect.y;
	btn_start_game_close.func_click = btn_start_game_close_click;
	btn_start_game_close.data_click = &menu_data;

	btn_chapter1.text.copyFromCstr("Chapter 1: Test");
	btn_chapter1.updateSprite();
	btn_chapter1.rect.w = btn_chapter1.sprite.surface.w;
	btn_chapter1.rect.h = btn_chapter1.sprite.surface.h;
	btn_chapter1.rect.x = mnu_start_game.rect.x;
	btn_chapter1.rect.y =
	    btn_start_game_close.rect.y + btn_start_game_close.rect.h;
	btn_chapter1.func_click = btn_chapter1_click;
	btn_chapter1.data_click = &game;

	// mnu_editor
	mnu_editor.rect.x = MNU_SUB_X;
	mnu_editor.rect.y = MNU_SUB_Y;
	mnu_editor.rect.w = 0;
	mnu_editor.rect.h = 0;
	mnu_editor.visible = 0;

	btn_editor_close.text.copyFromCstr("<- Main");
	btn_editor_close.updateSprite();
	btn_editor_close.rect.w = btn_editor_close.sprite.surface.w;
	btn_editor_close.rect.h = btn_editor_close.sprite.surface.h;
	btn_editor_close.rect.x = mnu_editor.rect.x;
	btn_editor_close.rect.y = mnu_editor.rect.y;
	btn_editor_close.func_click = btn_editor_close_click;
	btn_editor_close.data_click = &menu_data;

	lbl_edit_name.text.copyFromCstr("Name:");
	lbl_edit_name.updateSprite();
	lbl_edit_name.rect.w = lbl_edit_name.sprite.surface.w;
	lbl_edit_name.rect.h = lbl_edit_name.sprite.surface.h;
	lbl_edit_name.rect.x = mnu_editor.rect.x;
	lbl_edit_name.rect.y =
	    btn_editor_close.rect.y + btn_editor_close.rect.h;

	txt_edit_name.rect.w = 200;
	txt_edit_name.rect.h = FONT_SIZE + 4;
	txt_edit_name.rect.x = lbl_edit_name.rect.x + lbl_edit_name.rect.w;
	txt_edit_name.rect.y = lbl_edit_name.rect.y;

	lbl_edit_width.text.copyFromCstr("Width:");
	lbl_edit_width.updateSprite();
	lbl_edit_width.rect.w = lbl_edit_width.sprite.surface.w;
	lbl_edit_width.rect.h = lbl_edit_width.sprite.surface.h;
	lbl_edit_width.rect.x = mnu_editor.rect.x;
	lbl_edit_width.rect.y = lbl_edit_name.rect.y + lbl_edit_name.rect.h;

	txt_edit_width.rect.w = 200;
	txt_edit_width.rect.h = FONT_SIZE + 4;
	txt_edit_width.rect.x = lbl_edit_width.rect.x + lbl_edit_width.rect.w;
	txt_edit_width.rect.y = lbl_edit_width.rect.y;

	lbl_edit_height.text.copyFromCstr("Height:");
	lbl_edit_height.updateSprite();
	lbl_edit_height.rect.w = lbl_edit_height.sprite.surface.w;
	lbl_edit_height.rect.h = lbl_edit_height.sprite.surface.h;
	lbl_edit_height.rect.x = mnu_editor.rect.x;
	lbl_edit_height.rect.y = lbl_edit_width.rect.y + lbl_edit_width.rect.h;

	txt_edit_height.rect.w = 200;
	txt_edit_height.rect.h = FONT_SIZE + 4;
	txt_edit_height.rect.x =
	    lbl_edit_height.rect.x + lbl_edit_height.rect.w;
	txt_edit_height.rect.y = lbl_edit_height.rect.y;

	btn_start_edit.text.copyFromCstr("Start");
	btn_start_edit.updateSprite();
	btn_start_edit.rect.w = btn_start_edit.sprite.surface.w;
	btn_start_edit.rect.h = btn_start_edit.sprite.surface.h;
	btn_start_edit.rect.x = mnu_editor.rect.x;
	btn_start_edit.rect.y = lbl_edit_height.rect.y + lbl_edit_height.rect.h;
	btn_start_edit.func_click = btn_start_edit_click;
	btn_start_edit.data_click = &btn_start_edit_data;

	// mnu_settings
	mnu_settings.rect.x = MNU_SUB_X;
	mnu_settings.rect.y = MNU_SUB_Y;
	mnu_settings.rect.w = 0;
	mnu_settings.rect.h = 0;
	mnu_settings.visible = 0;

	btn_settings_close.text.copyFromCstr("<- Main");
	btn_settings_close.updateSprite();
	btn_settings_close.rect.w = btn_settings_close.sprite.surface.w;
	btn_settings_close.rect.h = btn_settings_close.sprite.surface.h;
	btn_settings_close.rect.x = mnu_settings.rect.x;
	btn_settings_close.rect.y = mnu_settings.rect.y;
	btn_settings_close.func_click = btn_settings_close_click;
	btn_settings_close.data_click = &btn_settings_data;

	lbl_gfx_window_w.text.copyFromCstr("Resolution X:");
	lbl_gfx_window_w.updateSprite();
	lbl_gfx_window_w.rect.w = lbl_gfx_window_w.sprite.surface.w;
	lbl_gfx_window_w.rect.h = lbl_gfx_window_w.sprite.surface.h;
	lbl_gfx_window_w.rect.x = mnu_settings.rect.x;
	lbl_gfx_window_w.rect.y =
	    btn_settings_close.rect.y + btn_settings_close.rect.h;

	txt_gfx_window_w.rect.w = 200;
	txt_gfx_window_w.rect.h = FONT_SIZE + 4;
	txt_gfx_window_w.rect.x =
	    lbl_gfx_window_w.rect.x + lbl_gfx_window_w.rect.w;
	txt_gfx_window_w.rect.y = lbl_gfx_window_w.rect.y;

	lbl_gfx_window_h.text.copyFromCstr("Resolution Y:");
	lbl_gfx_window_h.updateSprite();
	lbl_gfx_window_h.rect.w = lbl_gfx_window_h.sprite.surface.w;
	lbl_gfx_window_h.rect.h = lbl_gfx_window_h.sprite.surface.h;
	lbl_gfx_window_h.rect.x = mnu_settings.rect.x;
	lbl_gfx_window_h.rect.y =
	    lbl_gfx_window_w.rect.y + lbl_gfx_window_w.rect.h;

	txt_gfx_window_h.rect.w = 200;
	txt_gfx_window_h.rect.h = FONT_SIZE + 4;
	txt_gfx_window_h.rect.x =
	    lbl_gfx_window_h.rect.x + lbl_gfx_window_h.rect.w;
	txt_gfx_window_h.rect.y = lbl_gfx_window_h.rect.y;

	lbl_gfx_window_fullscreen.text.copyFromCstr("Fullscreen:");
	lbl_gfx_window_fullscreen.updateSprite();
	lbl_gfx_window_fullscreen.rect.w = lbl_gfx_window_h.sprite.surface.w;
	lbl_gfx_window_fullscreen.rect.h = lbl_gfx_window_h.sprite.surface.h;
	lbl_gfx_window_fullscreen.rect.x = mnu_settings.rect.x;
	lbl_gfx_window_fullscreen.rect.y =
	    lbl_gfx_window_h.rect.y + lbl_gfx_window_w.rect.h;

	txt_gfx_window_fullscreen.rect.w = 20;
	txt_gfx_window_fullscreen.rect.h = FONT_SIZE + 4;
	txt_gfx_window_fullscreen.rect.x =
	    lbl_gfx_window_fullscreen.rect.x + lbl_gfx_window_fullscreen.rect.w;
	txt_gfx_window_fullscreen.rect.y = lbl_gfx_window_fullscreen.rect.y;

	// mnu_license
	mnu_license.rect.x = MNU_SUB_X;
	mnu_license.rect.y = MNU_SUB_Y;
	mnu_license.rect.w = 0;
	mnu_license.rect.h = 0;
	mnu_license.visible = 0;

	btn_license_close.text.copyFromCstr("<- Main");
	btn_license_close.updateSprite();
	btn_license_close.rect.w = btn_license_close.sprite.surface.w;
	btn_license_close.rect.h = btn_license_close.sprite.surface.h;
	btn_license_close.rect.x = mnu_license.rect.x;
	btn_license_close.rect.y = mnu_license.rect.y;
	btn_license_close.func_click = btn_license_close_click;
	btn_license_close.data_click = &menu_data;

	lbl_license.text.copyFromCstr(APP_NAME);
	String_append_cstr(&lbl_license.text, APP_VERSION);
	String_append_cstr(&lbl_license.text, " is licensed under the ");
	String_append_cstr(&lbl_license.text, APP_LICENSE);
	lbl_license.text.len = strlen(btn_license_close.text.str) - 1;
	lbl_license.updateSprite();
	lbl_license.rect.w = lbl_license.sprite.surface.w;
	lbl_license.rect.h = lbl_license.sprite.surface.h;
	lbl_license.rect.x = mnu_license.rect.x;
	lbl_license.rect.y =
	    btn_license_close.rect.y + btn_license_close.rect.h;

	lbl_notice1.text.copyFromCstr(APP_LICENSE_SOURCE1);
	lbl_notice1.updateSprite();
	lbl_notice1.rect.w = lbl_notice1.sprite.surface.w;
	lbl_notice1.rect.h = lbl_notice1.sprite.surface.h;
	lbl_notice1.rect.x = mnu_license.rect.x;
	lbl_notice1.rect.y = lbl_license.rect.y + lbl_license.rect.h;

	lbl_notice2.text.copyFromCstr(APP_LICENSE_SOURCE2);
	lbl_notice2.updateSprite();
	lbl_notice2.rect.w = lbl_notice2.sprite.surface.w;
	lbl_notice2.rect.h = lbl_notice2.sprite.surface.h;
	lbl_notice2.rect.x = mnu_license.rect.x;
	lbl_notice2.rect.y = lbl_notice1.rect.y + lbl_notice1.rect.h;

	lbl_source1.text.copyFromCstr(
		"The source code of this program is available at");
	lbl_source1.updateSprite();
	lbl_source1.rect.w = lbl_source1.sprite.surface.w;
	lbl_source1.rect.h = lbl_source1.sprite.surface.h;
	lbl_source1.rect.x = mnu_license.rect.x;
	lbl_source1.rect.y = lbl_notice2.rect.y + lbl_notice2.rect.h;

	lbl_source2.text.copyFromCstr(APP_SOURCE);
	lbl_source2.updateSprite();
	lbl_source2.rect.w = lbl_source2.sprite.surface.w;
	lbl_source2.rect.h = lbl_source2.sprite.surface.h;
	lbl_source2.rect.x = mnu_license.rect.x;
	lbl_source2.rect.y = lbl_source1.rect.y + lbl_source1.rect.h;

	// mainloop
	f32 ts_draw = 0.0;
	f32 ts_now;

	while (main_active) {
		// process events
		while (sdl.pollEvent(&event)) {
			// menu events
			mnu_master.handleEvent(&event);
			mnu_main.handleEvent(&event);
			mnu_start_game.handleEvent(&event);
			mnu_editor.handleEvent(&event);
			mnu_settings.handleEvent(&event);
			mnu_license.handleEvent(&event);

			// app events
			switch (event.eventType) {
			case sdl.QUIT:
				main_active = false;
				break;
			}
		}

		ts_now = now();

		// draw menus
		if (ts_now > ts_draw + (1.0 / MENU_FRAMERATE)) {
			mnu_master.draw();
			mnu_main.draw();
			mnu_start_game.draw();
			mnu_editor.draw();
			mnu_settings.draw();
			mnu_license.draw();

			renderer.present();

			ts_draw = now();
		}
	}

	// save config
	cfg.to_file();

	main_clear:

	// clear strings
	window_title.free();
	msg.free();

	// clear menus
	mnu_master.free();
	mnu_main.free();
	mnu_start_game.free();
	mnu_editor.free();
	mnu_settings.free();
	mnu_license.free();

	// quit TTF
	ttf.quit();

	// quit SDL
	sdl.quit();

	//close log file
	fclose(log.file);

	return 0;
}
